#pragma once
#include <dynalizer/dynalizer.hpp>
#include <$HEADER>
#include <stdexcept>

#define $UCLASS_WRAP_INIT(Fun)                                   \
m_sym_ ## Fun = m_lib.symbol<decltype(::Fun)*>(# Fun);           \
if(!m_sym_ ## Fun)                                               \
    throw std::runtime_error("Invalid symbol lookup: Fun");

#define $UCLASS_WRAP_FUNCTION(Fun, PrettyFun)                    \
public:                                                          \
template<typename... Args>                                       \
auto PrettyFun(Args&&... args) -> decltype(auto)                 \
{                                                                \
  return m_sym_ ## Fun(std::forward<Args>(args)...);             \
}                                                                \
private:                                                         \
  decltype(::Fun)* m_sym_ ## Fun{};


class $CLASS
{
public:
  explicit $CLASS(const char* filepath)
    : m_lib{filepath}
  {
  
$INIT
  }

  static auto& instance() {
    static $CLASS c;
    return c;
  }
  
$FUNCTIONS

private:
  dynalizer::library m_lib;
};

#undef $UCLASS_WRAP_FUNCTION
#undef $UCLASS_WRAP_INIT